
    if (jQuery().dataTable) {

        function initTable1() {
            var table = jQuery('#sample_1');

            /* Table tools samples: https://www.datatables.net/release-datatables/extras/TableTools/ */

            /* Set tabletools buttons and button container */

            $.extend(true, $.fn.DataTable.TableTools.classes, {
                "container": "btn-group float-right tabletools-topbar",
                "buttons": {
                    "normal": "btn btn-sm btn-default",
                    "disabled": "btn btn-sm btn-default disabled"
                },
                "collection": {
                    "container": "DTTT_dropdown dropdown-menu tabletools-dropdown-menu"
                }
            });

            var oTable = table.dataTable({
                "order": [
                    [0, 'asc']
                ],

                "lengthMenu": [
                    [5, 15, 20, -1],
                    [5, 15, 20, "All"] // change per page values here
                ],
                // set the initial value
                "pageLength": 10,

                "dom": "<'row' <'col-md-12'T>><'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r><'table-scrollable't><'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>", // horizobtal scrollable datatable

                "tableTools": {
                    "sSwfPath": "assets/plugins/datatables/extensions/TableTools/swf/copy_csv_xls_pdf.swf",
                    "aButtons": [{
                        "sExtends": "pdf",
                        "sButtonText": "PDF"
                    }, {
                        "sExtends": "csv",
                        "sButtonText": "CSV"
                    }, {
                        "sExtends": "xls",
                        "sButtonText": "Excel"
                    }, {
                        "sExtends": "print",
                        "sButtonText": "Print",
                        "sInfo": 'Please press "CTR+P" to print or "ESC" to quit',
                        "sMessage": "Generated by DataTables"
                    }]
                }
            });

            var tableWrapper = jQuery('#sample_1_wrapper'); // datatable creates the table wrapper by adding with id {your_table_jd}_wrapper

            tableWrapper.find('.dataTables_length select').select2(); // initialize select2 dropdown
        }

				function initTable2() {
					var table = jQuery('#sample_2');

					/* Table tools samples: https://www.datatables.net/release-datatables/extras/TableTools/ */

					/* Set tabletools buttons and button container */

					$.extend(true, $.fn.DataTable.TableTools.classes, {
        "container": "btn-group tabletools-btn-group float-right",
						"buttons": {
        "normal": "btn btn-sm btn-default",
							"disabled": "btn btn-sm btn-default disabled"
						}
					});

					var oTable = table.dataTable({
        "order": [
							[0, 'asc']
						],
						"lengthMenu": [
							[5, 15, 20, -1],
							[5, 15, 20, "All"] // change per page values here
						],

						// set the initial value
						"pageLength": 10,
						"dom": "<'row' <'col-md-12'T>><'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r><'table-scrollable't><'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>", // horizobtal scrollable datatable

						"tableTools": {
        "sSwfPath": "assets/plugins/datatables/extensions/TableTools/swf/copy_csv_xls_pdf.swf",
							"aButtons": [{
        "sExtends": "pdf",
								"sButtonText": "PDF"
							}, {
        "sExtends": "csv",
								"sButtonText": "CSV"
							}, {
        "sExtends": "xls",
								"sButtonText": "Excel"
							}, {
        "sExtends": "print",
								"sButtonText": "Print",
								"sInfo": 'Please press "CTRL+P" to print or "ESC" to quit',
								"sMessage": "Generated by DataTables"
							}, {
        "sExtends": "copy",
								"sButtonText": "Copy"
							}]
						}
					});

					var tableWrapper = jQuery('#sample_2_wrapper'); // datatable creates the table wrapper by adding with id {your_table_jd}_wrapper
					tableWrapper.find('.dataTables_length select').select2(); // initialize select2 dropdown
				}

				function initTable3() {
					var table = jQuery('#sample_3');

					/* Formatting function for row expanded details */
					function fnFormatDetails(oTable, nTr) {
						var aData = oTable.fnGetData(nTr);
						var sOut = '<table>';
						sOut += '<tr><td>Platform(s):</td><td>' + aData[2] + '</td></tr>';
						sOut += '<tr><td>Engine version:</td><td>' + aData[3] + '</td></tr>';
						sOut += '<tr><td>CSS grade:</td><td>' + aData[4] + '</td></tr>';
						sOut += '<tr><td>Others:</td><td>Could provide a link here</td></tr>';
						sOut += '</table>';

						return sOut;
					}

					/*
					 * Insert a 'details' column to the table
					 */
					var nCloneTh = document.createElement('th');
					nCloneTh.className = "table-checkbox";

					var nCloneTd = document.createElement('td');
					nCloneTd.innerHTML = '<span class="row-details row-details-close"></span>';

					table.find('thead tr').each(function () {
        this.insertBefore(nCloneTh, this.childNodes[0]);
    });

					table.find('tbody tr').each(function () {
        this.insertBefore(nCloneTd.cloneNode(true), this.childNodes[0]);
    });

					var oTable = table.dataTable({
        "columnDefs": [{
        "orderable": false,
							"targets": [0]
						}],
						"order": [
							[1, 'asc']
						],
						"lengthMenu": [
							[5, 15, 20, -1],
							[5, 15, 20, "All"] // change per page values here
						],
						// set the initial value
						"pageLength": 10,
					});

					var tableWrapper = jQuery('#sample_3_wrapper'); // datatable creates the table wrapper by adding with id {your_table_jd}_wrapper
					var tableColumnToggler = jQuery('#sample_3_column_toggler');

					/* modify datatable control inputs */
					tableWrapper.find('.dataTables_length select').select2(); // initialize select2 dropdown

					/* Add event listener for opening and closing details
					 * Note that the indicator for showing which row is open is not controlled by DataTables,
					 * rather it is done here
					 */
					table.on('click', ' tbody td .row-details', function () {
						var nTr = jQuery(this).parents('tr')[0];
						if (oTable.fnIsOpen(nTr)) {
        /* This row is already open - close it */
        jQuery(this).addClass("row-details-close").removeClass("row-details-open");
    oTable.fnClose(nTr);
						} else {
        /* Open this row */
        jQuery(this).addClass("row-details-open").removeClass("row-details-close");
    oTable.fnOpen(nTr, fnFormatDetails(oTable, nTr), 'details');
						}
					});

					/* handle show/hide columns*/
					jQuery('input[type="checkbox"]', tableColumnToggler).change(function () {
						/* Get the DataTables object again - this is not a recreation, just a get of the object */
						var iCol = parseInt(jQuery(this).attr("data-column"));
						var bVis = oTable.fnSettings().aoColumns[iCol].bVisible;
						oTable.fnSetColumnVis(iCol, (bVis ? false : true));
					});
				}

				function initTable4() {

					var table = jQuery('#sample_4');

					/* Fixed header extension: http://datatables.net/extensions/scroller/ */

					var oTable = table.dataTable({
        "dom": "<'row'<'col-md-6 col-sm-12'l><'col-md-6 col-sm-12'f>r>t<'row'<'col-md-5 col-sm-12'i><'col-md-7 col-sm-12'p>>", // datatable layout without  horizobtal scroll
						"scrollY": "300",
						"deferRender": true,
						"order": [
							[0, 'asc']
						],
						"lengthMenu": [
							[5, 15, 20, -1],
							[5, 15, 20, "All"] // change per page values here
						],
						"pageLength": 10 // set the initial value
					});


					var tableWrapper = jQuery('#sample_4_wrapper'); // datatable creates the table wrapper by adding with id {your_table_jd}_wrapper
					tableWrapper.find('.dataTables_length select').select2(); // initialize select2 dropdown
				}

				function initTable5() {

					var table = jQuery('#sample_5');

					/* Fixed header extension: http://datatables.net/extensions/keytable/ */

					var oTable = table.dataTable({
        "order": [
							[0, 'asc']
						],
						"lengthMenu": [
							[5, 15, 20, -1],
							[5, 15, 20, "All"] // change per page values here
						],
						"pageLength": 10, // set the initial value,
						"columnDefs": [{  // set default column settings
        'orderable': false,
							'targets': [0]
						}, {
        "searchable": false,
							"targets": [0]
						}],
						"order": [
							[1, "asc"]
						]
					});

					var oTableColReorder = new $.fn.dataTable.ColReorder( oTable );

					var tableWrapper = jQuery('#sample_5_wrapper'); // datatable creates the table wrapper by adding with id {your_table_jd}_wrapper
					tableWrapper.find('.dataTables_length select').select2(); // initialize select2 dropdown
				}

				function initTable6() {
					var table = jQuery('#datatable_sample');

					table.dataTable({
        "columns": [{
        "orderable": false
						}, {
        "orderable": true
						}, {
        "orderable": false
						}, {
        "orderable": false
						}, {
        "orderable": true
						}, {
        "orderable": false
						}],
						"lengthMenu": [
							[5, 15, 20, -1],
							[5, 15, 20, "All"] // change per page values here
						],
						// set the initial value
						"pageLength": 5,
						"pagingType": "bootstrap_full_number",
						"language": {
        "lengthMenu": "  _MENU_ records",
							"paginate": {
        "previous":"Prev",
								"next": "Next",
								"last": "Last",
								"first": "First"
							}
						},
						"columnDefs": [{  // set default column settings
        'orderable': false,
							'targets': [0]
						}, {
        "searchable": false,
							"targets": [0]
						}],
						"order": [
							[1, "asc"]
						] // set first column as a default sort by asc
					});

					var tableWrapper = jQuery('#datatable_sample_wrapper');

					table.find('.group-checkable').change(function () {
						var set = jQuery(this).attr("data-set");
						var checked = jQuery(this).is(":checked");
						jQuery(set).each(function () {
							if (checked) {
        jQuery(this).attr("checked", true);
    jQuery(this).parents('tr').addClass("active");
							} else {
        jQuery(this).attr("checked", false);
    jQuery(this).parents('tr').removeClass("active");
							}
						});
						jQuery.uniform.update(set);
					});

					table.on('change', 'tbody tr .checkboxes', function () {
        jQuery(this).parents('tr').toggleClass("active");
    });

					tableWrapper.find('.dataTables_length select').addClass("form-control input-xsmall input-inline"); // modify table per page dropdown

				}

				function initTable7() {

        function restoreRow(oTable, nRow) {
            var aData = oTable.fnGetData(nRow);
            var jqTds = $('>td', nRow);

            for (var i = 0, iLen = jqTds.length; i < iLen; i++) {
                oTable.fnUpdate(aData[i], nRow, i, false);
            }

            oTable.fnDraw();
        }

					function editRow(oTable, nRow) {
						var aData = oTable.fnGetData(nRow);
						var jqTds = $('>td', nRow);
						jqTds[0].innerHTML = '<input type="text" class="form-control form-control-small" value="' + aData[0] + '">';
						jqTds[1].innerHTML = '<input type="text" class="form-control form-control-small" value="' + aData[1] + '">';
						jqTds[2].innerHTML = '<input type="text" class="form-control form-control-small" value="' + aData[2] + '">';
						jqTds[3].innerHTML = '<input type="text" class="form-control form-control-small" value="' + aData[3] + '">';
						jqTds[4].innerHTML = '<a class="edit" href="">Save</a>';
						jqTds[5].innerHTML = '<a class="cancel" href="">Cancel</a>';
					}

					function saveRow(oTable, nRow) {
						var jqInputs = $('input', nRow);
						oTable.fnUpdate(jqInputs[0].value, nRow, 0, false);
						oTable.fnUpdate(jqInputs[1].value, nRow, 1, false);
						oTable.fnUpdate(jqInputs[2].value, nRow, 2, false);
						oTable.fnUpdate(jqInputs[3].value, nRow, 3, false);
						oTable.fnUpdate('<a class="edit" href="">Edit</a>', nRow, 4, false);
						oTable.fnUpdate('<a class="delete" href="">Delete</a>', nRow, 5, false);
						oTable.fnDraw();
					}

					function cancelEditRow(oTable, nRow) {
						var jqInputs = $('input', nRow);
						oTable.fnUpdate(jqInputs[0].value, nRow, 0, false);
						oTable.fnUpdate(jqInputs[1].value, nRow, 1, false);
						oTable.fnUpdate(jqInputs[2].value, nRow, 2, false);
						oTable.fnUpdate(jqInputs[3].value, nRow, 3, false);
						oTable.fnUpdate('<a class="edit" href="">Edit</a>', nRow, 4, false);
						oTable.fnDraw();
					}

					var table = $('#sample_editable_1');

					var oTable = table.dataTable({
                        "lengthMenu": [
							[5, 15, 20, -1],
							[5, 15, 20, "All"] // change per page values here
						],
						// set the initial value
						"pageLength": 10,

						"language": {
                        "lengthMenu": " _MENU_ records"
						},
						"columnDefs": [{ // set default column settings
                        'orderable': true,
							'targets': [0]
						}, {
                        "searchable": true,
							"targets": [0]
						}],
						"order": [
							[0, "asc"]
						] // set first column as a default sort by asc
					});

					var tableWrapper = $("#sample_editable_1_wrapper");

					tableWrapper.find(".dataTables_length select").select2({
                        showSearchInput: false //hide search box with special css class
					}); // initialize select2 dropdown

					var nEditing = null;
					var nNew = false;

					$('#sample_editable_1_new').click(function (e) {
                        e.preventDefault();

                    if (nNew && nEditing) {
							if (confirm("Previose row not saved. Do you want to save it ?")) {
                        saveRow(oTable, nEditing); // save
                    $(nEditing).find("td:first").html("Untitled");
								nEditing = null;
								nNew = false;

							} else {
                        oTable.fnDeleteRow(nEditing); // cancel
                    nEditing = null;
								nNew = false;

								return;
							}
						}

						var aiNew = oTable.fnAddData(['', '', '', '', '', '']);
						var nRow = oTable.fnGetNodes(aiNew[0]);
						editRow(oTable, nRow);
						nEditing = nRow;
						nNew = true;
					});

					table.on('click', '.delete', function (e) {
                        e.preventDefault();

                    if (confirm("Are you sure to delete this row ?") == false) {
							return;
						}

						var nRow = $(this).parents('tr')[0];
						oTable.fnDeleteRow(nRow);
						alert("Deleted! Do not forget to do some ajax to sync with backend :)");
					});

					table.on('click', '.cancel', function (e) {
                        e.preventDefault();

                    if (nNew) {
                        oTable.fnDeleteRow(nEditing);
                    nNew = false;
						} else {
                        restoreRow(oTable, nEditing);
                    nEditing = null;
						}
					});

					table.on('click', '.edit', function (e) {
                        e.preventDefault();

                    /* Get the row as a parent of the link that was clicked on */
                    var nRow = $(this).parents('tr')[0];

						if (nEditing !== null && nEditing != nRow) {
                        /* Currently editing - but not this row - restore the old before continuing to edit mode */
                        restoreRow(oTable, nEditing);
                    editRow(oTable, nRow);
							nEditing = nRow;
						} else if (nEditing == nRow && this.innerHTML == "Save") {
                        /* Editing this row and want to save it */
                        saveRow(oTable, nEditing);
                    nEditing = null;
							alert("Updated! Do not forget to do some ajax to sync with backend :)");
						} else {
                        /* No edit in progress - let's start one */
                        editRow(oTable, nRow);
                    nEditing = nRow;
						}
					});

				}


				initTable1();
				initTable2();
				initTable3();
				initTable4();
				initTable5();
				initTable6();
				initTable7();

			}

